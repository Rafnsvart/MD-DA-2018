min(subset(Cars93$Horsepower,Cars93$Passengers=="7"))
min(subset(Cars93$Horsepower,Cars93$Passengers=="6"))
Cars93 <- cbind(Cars93, distances =Cars93$MPG.highway*Cars93$Fuel.tank.capacity)
max<-Cars93[Cars93$distances== max(Cars93$distances) ,]
medium<-Cars93[Cars93$distances== median(Cars93$distances) ,]
min<-Cars93[Cars93$distances== min(Cars93$distances) ,]
min
medium
max
Cars93 <- cbind(Cars93, distances =Cars93$MPG.highway*Cars93$Fuel.tank.capacity)
max<-Cars93[Cars93$distances== max(Cars93$distances) ,]
medium<-Cars93[Cars93$distances== median(Cars93$distances) ,]
min<-Cars93[Cars93$distances== min(Cars93$distances) ,]
min
medium
max
distance <- Cars93$MPG.highway*Cars93$Fuel.tank.capacity;
car.distances <- c(max(distance),min(distance),median(distance));
car.names <- c(as.character(Cars93$Make[which(distance==max(distance))]),as.character(Cars93$Make[which(distance==min(distance))]),as.character(Cars93$Make[which(distance==median(distance))]));
car.features <- c("Maximum","Minimum","Median");
distance.df <- data.frame(Feature = car.features, Name = car.names, Distance=car.distances);
distance.df;
Cars93 <- cbind(Cars93, distances =Cars93$MPG.highway*Cars93$Fuel.tank.capacity)
max<-Cars93[Cars93$distances== max(Cars93$distances) ,]
medium<-Cars93[Cars93$distances== median(Cars93$distances) ,]
min<-Cars93[Cars93$distances== min(Cars93$distances) ,]
min
medium
max
Cars93 <- cbind(Cars93, distances =Cars93$MPG.highway*Cars93$Fuel.tank.capacity)
max<-Cars93[Cars93$distances== max(Cars93$distances) ]
medium<-Cars93[Cars93$distances== median(Cars93$distances) ]
Cars93 <- cbind(Cars93, distances =Cars93$MPG.highway*Cars93$Fuel.tank.capacity)
max<-Cars93[Cars93$distances== max(Cars93$distances), ]
medium<-Cars93[Cars93$distances== median(Cars93$distances), ]
min<-Cars93[Cars93$distances== min(Cars93$distances), ]
min
medium
max
factory.run()
factory.run <- function (o.cars=1, o.trucks=1) {
factory <- matrix(c(40,1,60,3),nrow=2, dimnames=list(c("трудодни","сталь"),c("автомобили","грузовики")))
warehouse <- c(1600,70) #Доступно материалов на складе
names(warehouse) <- rownames(factory)
reserve <- c(8,1)
names(reserve) <- rownames(factory)
output <- c(o.cars, o.trucks)
names(output) <- colnames(factory)
steps <- 0 # Счётчик числа шагов цикла
repeat {
steps <- steps + 1
needed <- factory %*% output # Подсчитаем ресурсы, которые нам нужны для производства требуемого кол-ва машин
message(steps)
print(needed)
# Если ресурсов достаточно и остаток меньше или равен резерву, то мы произвели максимум возможного.
# Нужно прекращать
if (all(needed <= warehouse) && all((warehouse - needed) <= reserve)) {
break()
}
# Если заявка слишком большая и ресурсов недостаточно, уменьшим её на 10%
if (all(needed > warehouse)) {
output <- output * 0.9
next()
}
# Если всё наоброт, то увеличим на 10%
if (all(needed < warehouse)) {
output <- output * 1.1
next()
}
# Если мы потребили одного ресурса слишком много, а другого недостаточно,
# то увеличим план на случайную величину
output <- output * (1+runif(length(output),min=-0.1,max=0.1))
}
return(output)
}
factory.run()
factory.run()
}
factory.run()
factory.run()
factory.run()
factory.run()
factory.run <- function (o.cars=1, o.trucks=1) {
factory <- matrix(c(40,1,60,3),nrow=2, dimnames=list(c("трудодни","сталь"),c("автомобили","грузовики")))
warehouse <- c(1600,70) #Доступно материалов на складе
names(warehouse) <- rownames(factory)
reserve <- c(8,1)
names(reserve) <- rownames(factory)
output <- c(o.cars, o.trucks)
names(output) <- colnames(factory)
steps <- 0 # Счётчик числа шагов цикла
repeat {
steps <- steps + 1
needed <- factory %*% output # Подсчитаем ресурсы, которые нам нужны для производства требуемого кол-ва машин
message(steps)
print(needed)
# Если ресурсов достаточно и остаток меньше или равен резерву, то мы произвели максимум возможного.
# Нужно прекращать
if (all(needed <= warehouse) && all((warehouse - needed) <= reserve)) {
break()
}
# Если заявка слишком большая и ресурсов недостаточно, уменьшим её на 10%
if (all(needed > warehouse)) {
output <- output * 0.9
next()
}
# Если всё наоброт, то увеличим на 10%
if (all(needed < warehouse)) {
output <- output * 1.1
next()
}
# Если мы потребили одного ресурса слишком много, а другого недостаточно,
# то увеличим план на случайную величину
output <- output * (1+runif(length(output),min=-0.1,max=0.1))
}
return(list(steps, needed, output))
}
factory.run()
factory.run <- function (o.cars=1, o.trucks=1) {
factory <- matrix(c(40,1,60,3),nrow=2, dimnames=list(c("трудодни","сталь"),c("автомобили","грузовики")))
warehouse <- c(1600,70) #Доступно материалов на складе
names(warehouse) <- rownames(factory)
reserve <- c(8,1)
names(reserve) <- rownames(factory)
output <- c(o.cars, o.trucks)
names(output) <- colnames(factory)
steps <- 0 # Счётчик числа шагов цикла
repeat {
steps <- steps + 1
names(steps) <- "количество шагов";
needed <- factory %*% output # Подсчитаем ресурсы, которые нам нужны для производства требуемого кол-ва машин
# Если ресурсов достаточно и остаток меньше или равен резерву, то мы произвели максимум возможного.
# Нужно прекращать
if (all(needed <= warehouse) && all((warehouse - needed) <= reserve)) {
break()
}
# Если заявка слишком большая и ресурсов недостаточно, уменьшим её на 10%
if (all(needed > warehouse)) {
output <- output * 0.9
next()
}
# Если всё наоброт, то увеличим на 10%
if (all(needed < warehouse)) {
output <- output * 1.1
next()
}
# Если мы потребили одного ресурса слишком много, а другого недостаточно,
# то увеличим план на случайную величину
output <- output * (1+runif(length(output),min=-0.1,max=0.1))
}
return(list(steps,needed,output))
}
factory.run()
factory.run()
factory.run <- function (o.cars=1, o.trucks=1) {
factory <- matrix(c(40,1,60,3),nrow=2, dimnames=list(c("трудодни","сталь"),c("автомобили","грузовики")))
warehouse <- c(1600,70) #Доступно материалов на складе
names(warehouse) <- rownames(factory)
reserve <- c(8,1)
names(reserve) <- rownames(factory)
output <- c(o.cars, o.trucks)
names(output) <- colnames(factory)
steps <- 0 # Счётчик числа шагов цикла
repeat {
steps <- steps + 1
needed <- factory %*% output # Подсчитаем ресурсы, которые нам нужны для производства требуемого кол-ва машин
message(steps)
print(needed)
# Если ресурсов достаточно и остаток меньше или равен резерву, то мы произвели максимум возможного.
# Нужно прекращать
if (all(needed <= warehouse) && all((warehouse - needed) <= reserve)) {
break()
}
# Если заявка слишком большая и ресурсов недостаточно, уменьшим её на 10%
if (all(needed > warehouse)) {
output <- output * 0.9
next()
}
# Если всё наоброт, то увеличим на 10%
if (all(needed < warehouse)) {
output <- output * 1.1
next()
}
# Если мы потребили одного ресурса слишком много, а другого недостаточно,
# то увеличим план на случайную величину
output <- output * (1+runif(length(output),min=-0.1,max=0.1))
}
return(output)
}
factory.run()
factory.run()
factory.run()
factory.run <- function (o.cars=1, o.trucks=1) {
factory <- matrix(c(40,1,60,3),nrow=2, dimnames=list(c("трудодни","сталь"),c("автомобили","грузовики")))
warehouse <- c(1600,70) #Доступно материалов на складе
names(warehouse) <- rownames(factory)
reserve <- c(8,1)
names(reserve) <- rownames(factory)
output <- c(o.cars, o.trucks)
names(output) <- colnames(factory)
steps <- 0 # Счётчик числа шагов цикла
repeat {
steps <- steps + 1
names(steps) <- "количество шагов";
needed <- factory %*% output # Подсчитаем ресурсы, которые нам нужны для производства требуемого кол-ва машин
# Если ресурсов достаточно и остаток меньше или равен резерву, то мы произвели максимум возможного.
# Нужно прекращать
if (all(needed <= warehouse) && all((warehouse - needed) <= reserve)) {
break()
}
# Если заявка слишком большая и ресурсов недостаточно, уменьшим её на 10%
if (all(needed > warehouse)) {
output <- output * 0.9
next()
}
# Если всё наоброт, то увеличим на 10%
if (all(needed < warehouse)) {
output <- output * 1.1
next()
}
# Если мы потребили одного ресурса слишком много, а другого недостаточно,
# то увеличим план на случайную величину
output <- output * (1+runif(length(output),min=-0.1,max=0.1))
}
return(list(steps,needed,output))
}
factory.run()
factory.run()
factory.run()
factory.run(30, 20)
knitr::opts_chunk$set(echo = TRUE)
html <- readLines("https://raw.githubusercontent.com/SergeyMirvoda/MD-DA-2018/master/data/forbes.htm");
length(html);
sum(nchar(html));
emoluments<-grep("[$](\\d+,*\\d*) B", html)
lenght(emoluments)
emoluments<-grep("[$](\\d+,*\\d*) B", html)
length(emoluments)
html[emoluments]
emoluments.positions<-regexpr("[$](\\d+,*\\d*) B", html)
emoluments.value<-regmatches(html,emoluments.positions)
emoluments.positions
emoluments.value
emoluments.positions<-regexpr("[$](\\d+,*\\d*) B", html)
emoluments.value<-regmatches(html,emoluments.positions)
length(emoluments.value)
emoluments.positions<-regexpr("[$](\\d+,*\\d*) B", html)
emoluments.value<-regmatches(html,emoluments.positions)
length(emoluments.value)
emoluments.value[1]
emoluments.positions<-regexpr("[$](\\d+,*\\d*) B", html)
emoluments.value<-regmatches(html,emoluments.positions)
length(emoluments.value)
emoluments.value[1]
length(emoluments.value[emoluments.value=="$72 B"])
emoluments.positions<-regexpr("[$](\\d+,*\\d*) B", html)
emoluments.value<-regmatches(html,emoluments.positions)
length(emoluments.value)
emoluments.value[1]
length(emoluments.value[emoluments.value=="$72 B"])
emoluments.value[worth.value=="$41 B"]
emoluments.positions<-regexpr("[$](\\d+,*\\d*) B", html)
emoluments.value<-regmatches(html,emoluments.positions)
length(emoluments.value)
emoluments.value[1]
length(emoluments.value[emoluments.value=="$72 B"])
emoluments.value[emoluments.value=="$41 B"]
length(unique(emoluments.value))
worths<-as.numeric(sub(",",".", regmatches(emoluments.value, regexpr('(\\d+,*\\d*)',emoluments.value))))*10^9
is.vector(worths)
length(worths[worths>10^9])
max(worths)
median(worths)
mean(worths)
length(worths[worths>5*10^9])
length(worths[worths>10*10^9])
length(worths[worths>25*10^9])
sum(worths)
sum(worths[1:5])/sum(worths)
household.2013 <- 78.536*10^9
household.2013/sum(worths)
sum(worths[1:20])/sum(worths)
household.2013 <- 78536*10^9
household.2013/sum(worths)
household.2013 <- 78536*10^9
sum(worths)/household.2013
#Модифицируйте код из предыдущей лекции (функцию estimate.scaling.exponent), чтобы он возвращал список a и y0
estimate.scaling.exponent <- function (a, y0=6611, response=gmp$pcgmp, predictor = gmp$pop, maximum.iterations=100, deriv.step = 1/100, step.scale = 1e-12, stopping.deriv = 1/100)
{
mse <- function(a) { mean((response - y0*predictor^a)^2) }
for (iteration in 1:maximum.iterations) {
deriv <- (mse(a+deriv.step) - mse(a))/deriv.step
a <- a - step.scale*deriv
if (abs(deriv) <= stopping.deriv) { break() }
}
fit <- list(a=a, iterations=iteration,
converged=(iteration < maximum.iterations))
return(fit)
}
estimate.scaling.exponent(0.15)
#Модифицируйте код из предыдущей лекции (функцию estimate.scaling.exponent), чтобы он возвращал список a и y0
estimate.scaling.exponent <- function (a, y0=6611, response=gmp$pcgmp, predictor = gmp$pop, maximum.iterations=100, deriv.step = 1/100, step.scale = 1e-12, stopping.deriv = 1/100)
{
mse <- function(a) { mean((response - y0*predictor^a)^2) }
for (iteration in 1:maximum.iterations) {
deriv <- (mse(a+deriv.step) - mse(a))/deriv.step
a <- a - step.scale*deriv
if (abs(deriv) <= stopping.deriv) { break() }
}
fit <- list(a=a, iterations=iteration,
converged=(iteration < maximum.iterations))
return(fit)
}
estimate.scaling.exponent(0.15)
gmp <- read.table("gmp.dat")
gmp <- read.table("gmp.dat")
gmp <- read.table("gmp.dat")
gmp <- read.table("gmp.dat")
gmp <- read.table("gmp.dat")
gmp <- read.table("gmp.dat")
setwd("D:/Documents/ABD/test/ClassWork/5")
gmp <- read.table("gmp.dat")
gmp$pop <- gmp$gmp/gmp$pcgmp
plot(pcgmp~pop, data=gmp, xlab="Население", log="xy",ylab="Доход на душу населения ($/человеко-год)", main="Метрополии США, 2006")
#Модифицируйте код из предыдущей лекции (функцию estimate.scaling.exponent), чтобы он возвращал список a и y0
estimate.scaling.exponent <- function (a, y0=6611, response=gmp$pcgmp, predictor = gmp$pop, maximum.iterations=100, deriv.step = 1/100, step.scale = 1e-12, stopping.deriv = 1/100)
{
mse <- function(a) { mean((response - y0*predictor^a)^2) }
for (iteration in 1:maximum.iterations) {
deriv <- (mse(a+deriv.step) - mse(a))/deriv.step
a <- a - step.scale*deriv
if (abs(deriv) <= stopping.deriv) { break() }
}
fit <- list(a=a, iterations=iteration,
converged=(iteration < maximum.iterations))
return(fit)
}
estimate.scaling.exponent(0.15)
fit <- list(a=a, y0=y0)
#Модифицируйте код из предыдущей лекции (функцию estimate.scaling.exponent), чтобы он возвращал список a и y0
estimate.scaling.exponent <- function (a, y0=6611, response=gmp$pcgmp, predictor = gmp$pop, maximum.iterations=100, deriv.step = 1/100, step.scale = 1e-12, stopping.deriv = 1/100)
{
mse <- function(a) { mean((response - y0*predictor^a)^2) }
for (iteration in 1:maximum.iterations) {
deriv <- (mse(a+deriv.step) - mse(a))/deriv.step
a <- a - step.scale*deriv
if (abs(deriv) <= stopping.deriv) { break() }
}
fit <- list(a=a, y0=y0)
return(fit)
}
estimate.scaling.exponent(0.15)
#Напишите рекурсивные функции факториала и фибоначчи
factor <- function(n){
stopifnot(n>=0)
if (n <= 1) {
return(1)
}
return(factor(n-1)*n)
}
factor(5)
fib <- function(n){
stopifnot(n>0)
if (n<=2){
return(1)
}
return(fib(n-1)+fib(n-2))
}
fib(10)
library(gapminder)
install.packages('tidyverse')
library(gapminder)
finstall.packages('gapminder')
install.packages('gapminder')
#install.packages('gapminder')
#library(gapminder)
#install.packages('tidyverse')
#install.packages('dplyr')
#library(dplyr)
library(gapminder)
#install.packages('tidyverse')
library(dplyr)
#install.packages('tidyverse')
library(dplyr)
#Функция фильтр
filter(gapminder, lifeExp < 29)
filter(gapminder, country == "Afghanistan", year > 1981)
filter(gapminder, continent %in% c("Asia", "Africa"))
#Тоже самое для векторов
gapminder[gapminder$lifeExp < 29, ]
subset(gapminder, country == "Rwanda")
head(gapminder)
gapminder %>% head(3)
head(select(gapminder, year, lifeExp),4)
#Ниже то же самое, но с пайпом
gapminder %>%
select(year, lifeExp) %>%
head(4)
gapminder %>%
filter(country == "Cambodia") %>%
select(year, lifeExp)
#Ниже то же самое
gapminder[gapminder$country == "Cambodia", c("year", "lifeExp")]
#Для демонстрации следующих функций загрузим другой датасет
msleep <- read.csv("https://raw.githubusercontent.com/genomicsclass/dagdata/master/inst/extdata/msleep_ggplot2.csv")
head(msleep)
#Упорядочить по одной колонке
msleep %>% arrange(order) %>% head
#По нескольким
msleep %>%
select(name, order, sleep_total) %>%
arrange(order, sleep_total) %>%
head
#Отфильтруем и отсортируем по убыванию
msleep %>%
select(name, order, sleep_total) %>%
arrange(order, sleep_total) %>%
filter(sleep_total >= 16)
#Добавление колонок
msleep %>%
select(name, sleep_rem, sleep_total) %>%
mutate(rem_proportion = sleep_rem / sleep_total) %>%
head
#Получение итогов
msleep %>%
summarise(avg_sleep = mean(sleep_total),
min_sleep = min(sleep_total),
max_sleep = max(sleep_total),
total = n())
msleep %>%
group_by(order) %>%
summarise(avg_sleep = mean(sleep_total),
min_sleep = min(sleep_total),
max_sleep = max(sleep_total),
total = n())
library("magrittr")
library("dplyr")
#install.packages("nycflights13")
library("nycflights13")
flights <- tbl_df(flights)
install.packages("nycflights13")
#install.packages("nycflights13")
library("nycflights13")
flights <- tbl_df(flights)
flights
glimpse(flights) #Позволяет посмотреть немного информации про каждую колонку в таблице
flights %>% filter(dest == "MSN") # Сколько полетов было в Мэдисон
flights %>% filter(dest == "MSN", month == 1, day <=7) # Сколько полетов было в Мэдисон в первую неделю января
flights %>% # Оператор ИЛИ
filter(dest == "MSN" | dest == "ORD" | dest == "MDW")
flights %>%
filter(is.element(dest, c("MSN", "ORD", "MDW")))
flights %>%
arrange(origin, year, month, day) # Сортировка
flights %>%
filter(dest == "MSN") %>%
arrange(desc(dep_delay)) #Сортировка по убыванию
flights %>%
select(origin, year, month, day) #Выбор нужных колонок
flights %>%
select(origin, year:day, starts_with("dep")) #Выбор разных колонок
flights %>%
select(-dest, -starts_with("arr"),
-ends_with("time")) # Исключение лишних колонок
flights %>%
rename(y = year, m = month, d = day) # Переименование колонок
flights %>%
mutate(
gain = arr_delay - dep_delay,
speed = (distance / air_time) * 60,
gain_per_hour = gain / (air_time / 60)) %>%
select(gain:gain_per_hour)
aggregate(dep_delay ~ month, flights, mean, subset = flights$dest =="MSN") #Среднее время задержки в месяц
msn_by_month <- flights %>%
filter(dest == "MSN") %>%
group_by(month)
msn_by_month
msn_by_month %>%
summarise(
flights = n(),
avg_delay = mean(dep_delay, na.rm = TRUE),
n_planes = n_distinct(tailnum)) # Тоже позволяет найти среднюю задержку в месяц
flights %>%
group_by(dest, month) %>%
tally # Показывает число элементов в группе
msn_by_month %>% ungroup # Разгруппировка
# day gets peeled off
per_day <- flights %>%
group_by(dest, year, month, day) %>%
summarise(flights = n())
per_day
per_month <- per_day %>%
summarise(flights = sum(flights))
per_month
per_year <- per_month %>%
summarise(flights = sum(flights))
per_year #summarise отслаивается от одного слоя группировки
flights %>%
group_by(dest, month) %>%
mutate(timely = row_number(dep_delay),
late = row_number(desc(dep_delay))) %>%
select(dep_delay, timely:late) # Ранжирует задержки рейсов в пределах каждого пункта назначения и месяца
mean_center <- function(xs) {
xs - mean(xs, na.rm = TRUE)
}
flights %>%
group_by(dest, month) %>%
mutate(c_delay = mean_center(dep_delay)) %>%
select(dep_delay, c_delay)
v2 <- c("5",7,12)
v2[2] + v2[3]
http://miktex.org/2.9/setup
